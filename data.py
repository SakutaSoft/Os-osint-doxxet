import glob
import time
import sys
import os
from colorama import init, Fore
import csv
import json
import sqlite3
import logging
import xml.etree.ElementTree as ET
from openpyxl import load_workbook
from concurrent.futures import ThreadPoolExecutor
from pystyle import Colors, Colorate
from termcolor import colored
import re 
print(Fore.GREEN + """
‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°†‚†Ä
‚†à‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢∂‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚†ñ‚¢Ç‚°û‚†Ä‚†Ä
‚†Ä‚£º‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£ø‚£Ü‚†Ä‚†Ä‚¢Ä‚°¥‚†ã‚†Ä‚†Ä‚£∞‚£ø‚†Å‚†Ä‚¢∏‚£ß‚†Ä‚†Ä
‚¢†‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚†ø‚†Ä‚¢Ä‚£ø‚†É‚†Ä‚†Ä‚¢∞‚£ø‚°è‚†Ä‚†Ä‚¢∏‚£ø‚£Ñ‚†Ä
‚£™‚£∑‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£ú‚°õ‚°ü‚†Ä‚†∏‚£ü‚°Ü‚†Ä‚†Ä‚†ò‚£õ‚°≥‚†Ä‚†Ä‚†à‚£ø‚£ø‚°Ñ
‚¢ü‚£≠‚£∑‚°Ä‚†Ä‚†Ä‚¢Ä‚£Ø‚£ü‚°ü‚†Ä‚†Ä‚†Ä‚†ü‚£Ω‚°ß‚†Ä‚¢∏‚£ü‚†ª‚°Ü‚†Ä‚†Ä‚¢∞‚£¶‚£ù
‚†∏‚°ü‚£ø‚°ø‚£¶‚†Ä‚†ü‚†â‚°â‚£†‚°¶‚£†‚°∑‚†Ä‚°µ‚†ü‚¢É‚£º‚°ø‚£ø‚†Ä‚†Ä‚¢Ä‚£æ‚£õ‚†ø
‚†Ä‚†Ä‚†ª‚†á‚¢ø‚†Ä‚°Ü‚¢æ‚†É‚†õ‚†°‚£â‚£†‚£§‚£§‚£∂‚£ø‚¢π‚£ø‚†à‚†Ä‚¢Ä‚£º‚°ø‚£ø‚°Ü
‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£º‚£ø‚£å‚†Ä‚¢∞‚¢§‚£Ñ‚°â‚†õ‚†â‚£ö‚†ã‚¢à‚£Å‚£†‚£¥‚°ü‚£ø‚£ß‚†∏‚†É
‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°ø‚†ø‚†ª‚†∑‚†Ñ‚¢±‚£Ñ‚†à‚†ª‚†ø‚†ø‚†ü‚£ª‚£ø‚†è‚£ø‚°á‚¢∏‚†è‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚°∑‚†Ä‚†Ä‚£†‚£¥‚£ß‚†ô‚£∑‚£§‚°Ä‚†ö‚†ø‚†ø‚†ã‚†∞‚†õ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚¢Ä‚£æ‚£ø‚£ø‚£æ‚£ø‚£ø‚£ø‚°ø‚†Ä‚†à‚¢ø‚£ø‚°Ü‚†Ä‚†±‚£∂‚£æ‚£∑‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†à‚¢π‚£ø‚£ø‚£ø‚£ø‚°ø‚†ã‚†Å‚†Ä‚°Ä‚†à‚†ª‚£ø‚£¶‚†Ä‚†à‚†ª‚£ø‚£ø‚£¶‚°Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚††‚£≠‚£ø‚£ø‚£ø‚£¥‚£∂‚£∂‚£ø‚†Å‚†Ä‚†Ä‚†ò‚¢ø‚£ß‚†Ä‚†Ä‚†ô‚£ø‚£ø‚†ª‚£¶‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚£ø‚£ø‚£ø‚†ø‚†ü‚†õ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚°Ñ‚†Ä‚†Ä‚†π‚£ø‚£ß‚†à‚¢£
‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†â‚†Å‚†Ä‚¢∞‚£Ñ‚†Ä‚†Ä‚†Ä‚¢¢‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚†à‚°Ä‚†Ä‚¢ø‚£ø‚°Ü‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£ø‚£ø‚£∑‚°Ä‚†Ä‚†à‚°á‚†Ä‚†Ä‚¢∏‚†á‚¢∞‚°á‚†Ä‚£º‚£ø‚°á‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£æ‚†ü‚°õ‚†õ‚†õ‚¢á‚†Ä‚£∏‚°ó‚†Ä‚†Ä‚†ò‚¢Ä‚£æ‚†á‚¢Ä‚£ø‚£ø‚†É‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°ø‚†Å‚£º‚°Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚†É‚†Ä‚†Ä‚¢Å‚£æ‚°ø‚¢Ä‚£æ‚£ø‚†è‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†á‚†Ä‚†à‚†ª‚¢∂‚°æ‚†ø‚†õ‚†Å‚†Ä‚£Ä‚£¥‚£ø‚£ø‚£∂‚£ø‚£ø‚†ã‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚£†‚£∂‚°ø‚£ø‚£ø‚£∂‚£¶‚£¥‚£¶‚£∂‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ô‚†õ‚†ª‚†ü‚†ø‚†ª‚†õ‚†õ‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†à‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä   
–°–æ—Ñ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ Database (–ø–∞–ø–∫–∞ base)
    """)
GREEN = "\033[92m"
WHITE = "\033[97m"
RED = "\033[91m"
YELLOW = "\033[93m"
CYAN = "\033[96m"
RESET = "\033[0m"
BOLD = "\033[1m"

text_formats = ['.csv', '.txt', '.sql', '.xlsx', '.json', '.log']
def setup_logger():
    logger = logging.getLogger('search_logger')
    logger.setLevel(logging.DEBUG)
    file_handler = logging.FileHandler('search_log.txt', mode='w', encoding='utf-8')
    file_handler.setLevel(logging.DEBUG)
    stream_handler = logging.StreamHandler()
    stream_handler.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s', datefmt='%Y-%m-%d %H:%M:%S')
    file_handler.setFormatter(formatter)
    stream_handler.setFormatter(formatter)
    logger.addHandler(file_handler)
    logger.addHandler(stream_handler)

    return logger

logger = setup_logger()

def fast_print(text, interval=0.01):
    for char in text:
        sys.stdout.write(char)
        sys.stdout.flush()
        
def search_in_file(file_path, value):
    encodings = ['utf-8', 'utf-16', 'utf-32', 'iso-8859-1', 'iso-8859-2', 'iso-8859-3', 'iso-8859-4', 'iso-8859-5', 'iso-8859-6', 'iso-8859-7', 'iso-8859-8', 'iso-8859-9', 'iso-8859-15', 'windows-1250', 'windows-1251', 'windows-1252', 'windows-1253', 'windows-1254', 'windows-1255', 'windows-1256', 'windows-1257', 'windows-1258']
    results = []
    value=str(value)
    
    for encoding in encodings:
        try:
            with open(file_path, 'r', encoding=encoding, errors='ignore') as f:
                for line in f:
                    if value in line:
                        results.append(line.strip())
            if results: 
                break
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª {file_path} —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π {encoding}: {e}")
    if not results:
        logger.error(f"{RED}–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª {file_path} —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∞–º–∏.{RESET}")
    
    return results

def dbsearch(db_file, value):
    found_results = []
    start_time = time.time()
    try:
        found_results = search_in_file(db_file, value)
        if found_results:
            logger.info(f"{GREEN}–ù–∞–π–¥–µ–Ω–æ {len(found_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ {db_file}{RESET}")
    except Exception as e:
        logger.error(f"{RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {db_file}: {e}{RESET}")
    elapsed_time = time.time() - start_time
    if elapsed_time > 1000:
        logger.warning(f"{YELLOW}–ü–æ–∏—Å–∫ –≤ —Ñ–∞–π–ª–µ {db_file} –∑–∞–Ω—è–ª –±–æ–ª—å—à–µ 1000 —Å–µ–∫—É–Ω–¥.{RESET}")
    
    return found_results

def search_in_base_folder(value):
    start_time = time.time()
    all_found_results = []
    base_directory = 'base'
    db_files = []
    for ext in text_formats:
        db_files.extend(glob.glob(os.path.join(base_directory, '*' + ext)))
    try:
        with open('—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã_–ø–æ–∏—Å–∫–∞.txt', 'w', encoding='utf-8') as f:
            f.write(f'–ü–æ–∏—Å–∫–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å: {value}\n')
            logger.info(f"{CYAN}–ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –∑–∞–ø—Ä–æ—Å–æ–º: '{value}'{RESET}")
            for db in db_files:
                found_results = dbsearch(db, value)

                if found_results:
                    all_found_results.extend(found_results)
                    for result in found_results:
                        f.write(result + '\n')
    except Exception as ex:
        logger.error(f"{RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª: {ex}{RESET}")
    finally:
        elapsed_time = time.time() - start_time
        logger.info(f"{GREEN}–ù–∞–π–¥–µ–Ω–æ {len(all_found_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥.{RESET}")
def bd1():
    fast_print(f"{GREEN}–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å: {RESET}")
    search_query = input(f"{WHITE}")
    fast_print(f"{WHITE}üîç –ü–æ–∏—Å–∫...\n")
    search_in_base_folder(search_query)
    logger.info(f"{GREEN}–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ '—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã_–ø–æ–∏—Å–∫–∞.txt'.{RESET}")
    
ENCODINGS = ['utf-8', 'windows-1251', 'latin-1']
def print_message(message, color="white", bold=False):
    if bold:
        message = colored(message, color, attrs=['bold'])
    else:
        message = colored(message, color)
    print(message)
def print_header(title):
    print(colored(f'\n{"=" * 80}', "blue"))
    print(colored(f'*** {title} ***', "yellow", attrs=['bold']))
    print(colored(f'{"=" * 80}\n', "blue"))
def search_phone_number_in_folder(folder_path):
    if not os.path.exists(folder_path) or not os.path.isdir(folder_path):
        print_message(f'–û—à–∏–±–∫–∞: "{folder_path}" –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ø–∫–æ–π –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.', "magenta", bold=True)
        return
    print_header("–ü–æ–∏—Å–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    search_value = input(colored('–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å: ', "cyan")).strip()
    if not search_value:
        print_message('–û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.', "red", bold=True)
        return
    found_any = False
    for root, dirs, files in os.walk(folder_path):
        for filename in files:
            file_path = os.path.join(root, filename)
            if os.path.isfile(file_path):
                found = False
                for encoding in ENCODINGS:
                    try:
                        with open(file_path, 'r', encoding=encoding) as file:
                            for line in file:
                                if search_value in line:
                                    found_any = True
                                    if not found:
                                        print_header(f'–ù–∞–π–¥–µ–Ω {search_value} –≤ —Ñ–∞–π–ª–µ: {file_path}')
                                        found = True
                                    print_message(f'–ó–∞–≥–æ–ª–æ–≤–æ–∫: {search_value}', "yellow", bold=True)
                                    parts = re.split(r'\t|u+|m+|p+|t+|w+|q+|h+|y+|i+|g+', line.strip())
                                    for part in parts:
                                        print_message(f'[+] {part.strip()}', "green")
                                    print(colored('¬∞' * 80, "blue"))
                    except (UnicodeDecodeError, FileNotFoundError):
                        continue
    if not found_any:
        print_message('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.', "magenta", bold=True)
    print_message('–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...', "yellow")
    input()

text_formats = ['.csv', '.txt', '.sql', '.xlsx', '.json', '.log']

def dbsearch(db, value):
    found_results = []
    try:
        with open(db, 'r', encoding='utf-8') as f:
            Fline = f.readline()  
            
        with open(db, 'r', encoding='utf-8') as f:
            for line in f:
                if value in line:  
                    fdata = line.replace(',', ';').replace('\t', '    ').split(';')  
                    sdata = Fline.replace(',', ';').replace('\t', '    ').split(';')  
                    found_data = []
                    for i in range(len(fdata)):
                        if len(fdata[i]) < 80: 
                            if i < len(sdata):
                                key = sdata[i].strip()  
                                val = fdata[i].strip() if fdata[i].strip() else '–Ω–µ –Ω–∞–π–¥–µ–Ω'  
                                if key:  
                                    key_colored = Colorate.Horizontal(Colors.green_to_white, key)
                                    val_colored = Colorate.Horizontal(Colors.green_to_white, val)
                                    found_data.append(('  ‚îú ' + key_colored + ' -> ' + val_colored, '  ‚îú ' + key + ' -> ' + val))

                    found_data = [line for line in found_data if ': –Ω–µ –Ω–∞–π–¥–µ–Ω' not in line[1]]  
                    if found_data:
                        
                        db_colored = '‚îî‚îÄ‚îÄ‚îÇ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö -> ' + db
                        found_data.insert(0, (db_colored, '‚îî‚îÄ‚îÄ‚îÇ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö -> ' + db))
                        found_results.append(found_data)
    except BaseException as e:
        print(Colorate.Horizontal(Colors.green_to_white, '[ ! ] –û—à–∏–±–∫–∞: ' + str(e)))
    return found_results

def search_in_directory(directory, value):
    start_time = time.time()
    all_found_results = []
    db_files = []
    for ext in text_formats:
        db_files.extend(glob.glob(os.path.join(directory, '*' + ext)))
    db_files = [db for db in db_files if os.path.basename(db) != '—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã_–ø–æ–∏—Å–∫–∞.txt']

    try:
        for db in db_files:
            found_results = dbsearch(db, value)
            if found_results:
                all_found_results.extend(found_results)
                for result in found_results:
                    for colored_line, _ in result:
                        print(colored_line)
                    print('\n')
    except Exception as ex:
        print(ex)
    finally:
        end_time = time.time()
        elapsed_time = end_time - start_time
        summary_text = f'\nüîç –ü–æ–∏—Å–∫–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å: {value}\nüìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(all_found_results)}\n'
        summary_text += f'‚è≥–ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥\n' if elapsed_time <= 60 else f'‚è≥–ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {elapsed_time / 60:.2f} –º–∏–Ω—É—Ç\n'
        print(Colorate.Horizontal(Colors.green_to_white, summary_text))

if __name__ == '__main__':
    print("""
    1. –ü–æ–∏—Å–∫ –ø–æ –±–¥ –ù–æ–≤—ã–π
    2. –ü–æ–∏—Å–∫ –ø–æ –±–¥ –°—Ç–∞—Ä—ã–π
    3. –ü–æ–∏—Å–∫. –ø–æ –±–¥ –ù–æ–≤—ã–π V2
    """)
    
    choice = input("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç (1 –∏–ª–∏ 2): ")

    if choice == '1':
        bd2()
    elif choice == '2':
        bd1()
    elif choice =='3':
        folder_path = 'base'
        search_phone_number_in_folder(folder_path)

    else:
        print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2 - 3.")